package Gui;
import static Gui.LessInteractive.isNumber;
import Models.*;
import javax.swing.*;
import java.awt.*;
import Dijkastra.*;
import java.util.*;
import java.awt.event.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author thenullterminator
 */



public class MoreInteractive extends javax.swing.JFrame {
    
    static int sync=1;
    
    Graph g=new Graph();//Creating New Graph.
    Node selNode=null;//Currently Selected Node
    int flag=0,flaga=0;
    Node source=null,dest=null,sourcea=null,desta=null;
    
    /**
     * Creates new form PlayGround
     */
    public MoreInteractive() {
        initComponents();
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InteractiveControls = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        addVertex = new javax.swing.JRadioButton();
        addEdge = new javax.swing.JRadioButton();
        deleteVertex = new javax.swing.JRadioButton();
        deleteEdge = new javax.swing.JRadioButton();
        changeWt = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        changedWt = new javax.swing.JTextField();
        shortestPath = new javax.swing.JRadioButton();
        moveVertex = new javax.swing.JRadioButton();
        circle = new javax.swing.JRadioButton();
        cross = new javax.swing.JRadioButton();
        square = new javax.swing.JRadioButton();
        plus = new javax.swing.JRadioButton();
        triangle = new javax.swing.JRadioButton();
        vertexName = new javax.swing.JTextField();
        animatePath = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        workspaceTitle = new javax.swing.JLabel();
        workSpace = new WorkSpace(g,jButton3);
        result = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visualizing  Dijkstra's Algorithm");
        setResizable(false);

        jPanel2.setBackground(java.awt.Color.gray);

        addVertex.setBackground(java.awt.Color.gray);
        InteractiveControls.add(addVertex);
        addVertex.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        addVertex.setText("Add Vertex");
        addVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVertexActionPerformed(evt);
            }
        });

        addEdge.setBackground(java.awt.Color.gray);
        InteractiveControls.add(addEdge);
        addEdge.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        addEdge.setText("Add Edges");
        addEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeActionPerformed(evt);
            }
        });

        deleteVertex.setBackground(java.awt.Color.gray);
        InteractiveControls.add(deleteVertex);
        deleteVertex.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        deleteVertex.setText("Delete Vertex");
        deleteVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVertexActionPerformed(evt);
            }
        });

        deleteEdge.setBackground(java.awt.Color.gray);
        InteractiveControls.add(deleteEdge);
        deleteEdge.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        deleteEdge.setText("Delete Edge");
        deleteEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEdgeActionPerformed(evt);
            }
        });

        changeWt.setBackground(java.awt.Color.gray);
        InteractiveControls.add(changeWt);
        changeWt.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        changeWt.setText("Change weight to");
        changeWt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeWtActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        jButton3.setText("Stop Animation");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        shortestPath.setBackground(java.awt.Color.gray);
        InteractiveControls.add(shortestPath);
        shortestPath.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        shortestPath.setText("Shortest Path");
        shortestPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortestPathActionPerformed(evt);
            }
        });

        moveVertex.setBackground(java.awt.Color.gray);
        InteractiveControls.add(moveVertex);
        moveVertex.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        moveVertex.setText("Move vertex");
        moveVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveVertexActionPerformed(evt);
            }
        });

        circle.setBackground(java.awt.Color.gray);
        buttonGroup3.add(circle);
        circle.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        circle.setText("via Circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        cross.setBackground(java.awt.Color.gray);
        buttonGroup3.add(cross);
        cross.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        cross.setText("via Cross");
        cross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crossActionPerformed(evt);
            }
        });

        square.setBackground(java.awt.Color.gray);
        buttonGroup3.add(square);
        square.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        square.setText("via Square");
        square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareActionPerformed(evt);
            }
        });

        plus.setBackground(java.awt.Color.gray);
        buttonGroup3.add(plus);
        plus.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        plus.setText("via Plus");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        triangle.setBackground(java.awt.Color.gray);
        buttonGroup3.add(triangle);
        triangle.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        triangle.setText("via Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleActionPerformed(evt);
            }
        });

        animatePath.setBackground(java.awt.Color.gray);
        InteractiveControls.add(animatePath);
        animatePath.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        animatePath.setText("Animate Shortest Path");
        animatePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animatePathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(changeWt, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changedWt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(moveVertex)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(addVertex)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vertexName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addEdge)
                            .addComponent(deleteVertex)
                            .addComponent(deleteEdge)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(animatePath)
                            .addComponent(shortestPath)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(square)
                            .addComponent(circle)
                            .addComponent(cross)
                            .addComponent(plus)
                            .addComponent(triangle))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVertex)
                    .addComponent(vertexName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addEdge)
                .addGap(18, 18, 18)
                .addComponent(deleteVertex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changedWt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeWt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteEdge)
                .addGap(12, 12, 12)
                .addComponent(moveVertex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shortestPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(animatePath)
                .addGap(18, 18, 18)
                .addComponent(circle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(square)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cross)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(triangle)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jPanel1.setBackground(java.awt.Color.white);

        workspaceTitle.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        workspaceTitle.setForeground(java.awt.Color.green);
        workspaceTitle.setText("Welcome!!");

        workSpace.setBackground(java.awt.Color.white);
        workSpace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workSpaceMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                workSpaceMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                workSpaceMouseReleased(evt);
            }
        });

        result.setFont(new java.awt.Font("Purisa", 1, 18)); // NOI18N
        result.setForeground(java.awt.Color.green);

        javax.swing.GroupLayout workSpaceLayout = new javax.swing.GroupLayout(workSpace);
        workSpace.setLayout(workSpaceLayout);
        workSpaceLayout.setHorizontalGroup(
            workSpaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workSpaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(result)
                .addGap(182, 182, 182))
        );
        workSpaceLayout.setVerticalGroup(
            workSpaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workSpaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(result)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(workSpace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(305, Short.MAX_VALUE)
                .addComponent(workspaceTitle)
                .addGap(285, 285, 285))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(workspaceTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workSpace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeActionPerformed
        // TODO add your handling code here:
        if(addEdge.isSelected()){
            workspaceTitle.setText("       Drag a vertex to another to create an edge");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_addEdgeActionPerformed

    private void deleteVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVertexActionPerformed
        // TODO add your handling code here:
        if(deleteVertex.isSelected()){
            workspaceTitle.setText("            Ctrl + Click on a vertex to delete");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_deleteVertexActionPerformed

    private void deleteEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEdgeActionPerformed
        // TODO add your handling code here:
        if(deleteEdge.isSelected()){
            workspaceTitle.setText("            Ctrl + Click on an edge to delete");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_deleteEdgeActionPerformed

    private void changeWtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeWtActionPerformed
        // TODO add your handling code here:
        if(changeWt.isSelected()){
            workspaceTitle.setText("         Mention the weight and click on an edge");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_changeWtActionPerformed

    private void addVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVertexActionPerformed
        // TODO add your handling code here:
        if(addVertex.isSelected()){
            workspaceTitle.setText("       Click inside the white area to create a vertex");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_addVertexActionPerformed

    private void workSpaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workSpaceMouseClicked
        // TODO add your handling code here:
        if(addVertex.isSelected()){
            int X=evt.getX();
            int Y=evt.getY();
            String name=vertexName.getText().trim();
            if(g.overlapping(X,Y,30)!=null){
                JOptionPane.showMessageDialog(null,"Overlapping is not allowed");
                return;
            }
            
            if(vertexName.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(null,"Add a Vertex Name");
                return;
            }
            
            if(g.searchNode(name)!=null){
                JOptionPane.showMessageDialog(null,"Vertex Name Already exist");
                return;
            }
            
            //No key Combinations
            Node n=new Node();
            n.setName(name);
            n.setX(X);
            n.setY(Y);
            
            g.addNode(n);
            repaint();
            
            vertexName.setText("");
//            System.out.println("___________________________");
//            g.printNodes();
//            System.out.println("___________________________");
        }
        
        else if(changeWt.isSelected()){
            
            
            Boolean flag=false;
            try{
                if(changedWt.getText().trim().isEmpty()){
                    throw new InvalidInput("Weight cannot be blank");
                }
                if( !isNumber(changedWt.getText().trim())){
                    throw new InvalidInput("Weight should be Numeric");
                }
                if(Integer.parseInt(changedWt.getText().trim())<0){
                    throw new InvalidInput("Weight should be Non Negative");
                }
            }
            catch(InvalidInput e){
                JOptionPane.showMessageDialog(null,e.getMessage());
                flag=true;
            }
        
            if(!flag){

                int X=evt.getX();
                int Y=evt.getY();
                int weight=Integer.parseInt(changedWt.getText().trim());
                
                Edge e=g.selectedEdge(X,Y,20);
                
                if(e!=null){
                    System.out.println("From: "+e.getFrom()+" To: "+e.getTo());
                    g.changeWeight(e, weight);
                    Edge e2=g.searchEdge(e.getTo(),e.getFrom());
                    g.changeWeight(e2, weight);
//                    g.printEdges();
//                    System.out.println("___________________________");
//                    g.printEdges();
//                    System.out.println("___________________________");   
                    repaint();
                    changedWt.setText("");
                }
            }
            
        }
        else if(deleteVertex.isSelected()){
            int X=evt.getX();
            int Y=evt.getY();
            
            if(evt.isControlDown()){
                Node n=g.overlapping(X, Y, 30);
                if(n!=null){
                    g.removeNode(n);
                    g.removeAllEdges(n);
                    repaint();
                }
            }
        }
        else if(deleteEdge.isSelected()){
            
            if(evt.isControlDown()){
                int X=evt.getX();
                int Y=evt.getY();
                
                Edge e=g.selectedEdge(X,Y,20);
                if(e!=null){
                    g.removeEdge(e);
                    Edge e2=new Edge();
                    e2.setFrom(e.getTo());
                    e2.setTo(e.getFrom());
                    g.removeEdge(e2);
                    repaint();
                }   
            }
        }
        else if(shortestPath.isSelected()){
            
            int X=evt.getX();
            int Y=evt.getY();
            Node n=g.overlapping(X, Y, 30);
            
            if(n!=null){
                
                if(flag==0){
                    if(dest!=null) {
                        ((WorkSpace)workSpace).clear();
                        ((WorkSpace)workSpace).addPath("");
                        repaint();
                    }
                    source=n;
                    ((WorkSpace)workSpace).addSrc(source);
                    repaint();
                    flag=1;
                }
                else{
                    if(source!=n){
                        dest=n;
                        ((WorkSpace)workSpace).addDest(dest);
                        repaint();
                        flag=0;

                        //Dj algo.
                        Algo x=new Algo(g.createAdjList(),source.getName(),dest.getName());
                        x.implement();
                        int dist=x.getDistance();
                        String path=x.getPath();
                        result.setText("Shortest Distance: "+dist);
                        ((WorkSpace)workSpace).addPath(path);
                        ((WorkSpace)workSpace).repaint(); 
                    }
                    else{
                         JOptionPane.showMessageDialog(null,"Source and Destination cannot be same");
                         flag=0;
                         source=null;
                         dest=null;
                         ((WorkSpace)workSpace).clear();
                         repaint();
                    }
                }
            }
        }
        else if(animatePath.isSelected()){
            
            int X=evt.getX();
            int Y=evt.getY();
            Node n=g.overlapping(X, Y, 30);
            
            if(n!=null){
                
                if(flaga==0){
                    if(desta!=null) {
                        ((WorkSpace)workSpace).clear();
                        ((WorkSpace)workSpace).addPath("");
                        repaint();
                    }
                    sourcea=n;
                    ((WorkSpace)workSpace).addSrc(sourcea);
                    repaint();
                    flaga=1;
                }
                else{
                    if(sourcea!=n){
                        desta=n;
                        ((WorkSpace)workSpace).addDest(desta);
                        repaint();
                        flaga=0;

                        //Dj algo.
                        Algo x=new Algo(g.createAdjList(),sourcea.getName(),desta.getName());
                        x.implement();
                        int dist=x.getDistance();
                        String path=x.getPath();
    //                    result.setText("Shortest Distance: "+dist);

                        ((WorkSpace)workSpace).addPath(path);

                        ((WorkSpace)workSpace).pushPath(path);
    //                    ((WorkSpace)workSpace).printPath();
                        ((WorkSpace)workSpace).repaint(); 
                        
                    }
                    else{
                         JOptionPane.showMessageDialog(null,"Source and Destination cannot be same");
                         sourcea=null;
                         desta=null;
                         flaga=0;
                         ((WorkSpace)workSpace).clear();
                         repaint();
                    }
                }
            }
        }
    }//GEN-LAST:event_workSpaceMouseClicked
 
    private void workSpaceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workSpaceMouseReleased
        // TODO add your handling code here:
        
        
        if(addEdge.isSelected()){
            
            if(selNode !=null){
           
                Node n=g.overlapping(evt.getX(),evt.getY(),25);

                if(n!=null && selNode !=n){
    //                System.out.println("Released From: "+selNode.getName());
    //                System.out.println("Released To: "+n.getName());
                    String from=selNode.getName();
                    String to=n.getName();
                    if(g.searchEdge(from, to)!=null){
                    JOptionPane.showMessageDialog(null,"Edge is already present");
                    return ;
                    }

                    Edge e=new Edge();
                    e.setFrom(selNode.getName());
                    e.setTo(n.getName());
                    e.setWeight(1);

                    g.addEdge(e);
                    e=new Edge();
                    e.setFrom(n.getName());
                    e.setTo(selNode.getName());
                    e.setWeight(1);
                     g.addEdge(e);
                    repaint();
                    selNode=null;
                    
    //                System.out.println("___________________________");
    //                g.printEdges();
    //                System.out.println("___________________________");   
                }
            }
        }
        
        else if(moveVertex.isSelected()){
            
            if(selNode !=null){
                
                int x=evt.getX();
                int y=evt.getY();
                Node n=g.overlapping(x,y,25);
                
                if(n!=null){
                    JOptionPane.showMessageDialog(null,"Vertex cannot Overlap");
                    return ;
                }
                
                g.changeCord(selNode.getName(), x, y);
                repaint();
                selNode=null;
            }
        }
    }//GEN-LAST:event_workSpaceMouseReleased

    private void workSpaceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workSpaceMousePressed
        // TODO add your handling code here:
        if(addEdge.isSelected()){
            selNode=g.overlapping(evt.getX(),evt.getY(),25); //Setting the currently selected Node to selNode.
//            if(selNode !=null)
//            System.out.println("Sel: "+selNode.getName());
        }
        
        else if(moveVertex.isSelected()){
            selNode=g.overlapping(evt.getX(),evt.getY(),25); //Setting the currently selected Node to selNode.
//            if(selNode !=null)
//            System.out.println("Sel: "+selNode.getName());
        }
    }//GEN-LAST:event_workSpaceMousePressed

    private void shortestPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortestPathActionPerformed
        // TODO add your handling code here:
        if(shortestPath.isSelected()){
            workspaceTitle.setText("           Click on Source and Destination Vertex");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_shortestPathActionPerformed

    private void moveVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveVertexActionPerformed
        // TODO add your handling code here:
        if(moveVertex.isSelected()){
            workspaceTitle.setText("            Press and hold a vertex to move");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
            ((WorkSpace)workSpace).stop();
            repaint();
        }
        
    }//GEN-LAST:event_moveVertexActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        ((WorkSpace)workSpace).stop();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void crossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crossActionPerformed
        // TODO add your handling code here:
        
       if(cross.isSelected()){
        ((WorkSpace)workSpace).cir=0;
        ((WorkSpace)workSpace).cross=1;
        ((WorkSpace)workSpace).plus=0;
        ((WorkSpace)workSpace).sq=0;
        ((WorkSpace)workSpace).tri=0;
//        ((WorkSpace)workSpace).pushShape();
//        ((WorkSpace)workSpace).setButton(jButton3);
            if(desta!=null)
            {
                ((WorkSpace)workSpace).pushShape();
                ((WorkSpace)workSpace).Animate();
                desta=null;
                sourcea=null;
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Select Source and Destination");
            }
        }
    }//GEN-LAST:event_crossActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
        if(plus.isSelected()){
        ((WorkSpace)workSpace).cir=0;
        ((WorkSpace)workSpace).cross=0;
        ((WorkSpace)workSpace).plus=1;
        ((WorkSpace)workSpace).sq=0;
        ((WorkSpace)workSpace).tri=0;
//        ((WorkSpace)workSpace).pushShape();
//        ((WorkSpace)workSpace).setButton(jButton3);
        if(desta!=null)
        {
            ((WorkSpace)workSpace).pushShape();
            ((WorkSpace)workSpace).Animate();
             desta=null;
                sourcea=null;
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select Source and Destination");
        }
    }
                
    }//GEN-LAST:event_plusActionPerformed

    private void triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleActionPerformed
        // TODO add your handling code here:
         if(triangle.isSelected()){
            ((WorkSpace)workSpace).cir=0;
            ((WorkSpace)workSpace).cross=0;
            ((WorkSpace)workSpace).plus=0;
            ((WorkSpace)workSpace).sq=0;
            ((WorkSpace)workSpace).tri=1;
//            ((WorkSpace)workSpace).setButton(jButton3);
//            ((WorkSpace)workSpace).pushShape();
           if(desta!=null)
            {
                ((WorkSpace)workSpace).pushShape();
                ((WorkSpace)workSpace).Animate();
                 desta=null;
                sourcea=null;
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Select Source and Destination");
            }
        }
    }//GEN-LAST:event_triangleActionPerformed

    private void animatePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animatePathActionPerformed
        // TODO add your handling code here:
        
        if(animatePath.isSelected()){
            workspaceTitle.setText("  Click on Source and Destination Vertex and select a shape");
            workspaceTitle.setForeground(Color.red);
            result.setText("");
            ((WorkSpace)workSpace).clear();
//            ((WorkSpace)workSpace).stop();
            repaint();
        }
    }//GEN-LAST:event_animatePathActionPerformed

    private void squareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareActionPerformed
        // TODO add your handling code here:
        
        if(square.isSelected()){
            ((WorkSpace)workSpace).cir=0;
            ((WorkSpace)workSpace).cross=0;
            ((WorkSpace)workSpace).plus=0;
            ((WorkSpace)workSpace).sq=1;
            ((WorkSpace)workSpace).tri=0;
//            ((WorkSpace)workSpace).setButton(jButton3);
//            ((WorkSpace)workSpace).pushShape();
            if(desta!=null)
            {
                ((WorkSpace)workSpace).pushShape();
                ((WorkSpace)workSpace).Animate();
                 desta=null;
                sourcea=null;
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Select Source and Destination");
            }
        }
                
    }//GEN-LAST:event_squareActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        // TODO add your handling code here:
        if(circle.isSelected()){
            ((WorkSpace)workSpace).cir=1;
            ((WorkSpace)workSpace).cross=0;
            ((WorkSpace)workSpace).plus=0;
            ((WorkSpace)workSpace).sq=0;
            ((WorkSpace)workSpace).tri=0;
            
//            ((WorkSpace)workSpace).setButton(jButton3);
            if(desta!=null)
            {
//                System.out.println("iudhivhd");
                ((WorkSpace)workSpace).pushShape();
                ((WorkSpace)workSpace).Animate();
                 desta=null;
                sourcea=null;
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Select Source and Destination");
            }
        }
    }//GEN-LAST:event_circleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoreInteractive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoreInteractive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoreInteractive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoreInteractive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoreInteractive().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup InteractiveControls;
    private javax.swing.JRadioButton addEdge;
    private javax.swing.JRadioButton addVertex;
    private javax.swing.JRadioButton animatePath;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JRadioButton changeWt;
    private javax.swing.JTextField changedWt;
    private javax.swing.JRadioButton circle;
    private javax.swing.JRadioButton cross;
    private javax.swing.JRadioButton deleteEdge;
    private javax.swing.JRadioButton deleteVertex;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton moveVertex;
    private javax.swing.JRadioButton plus;
    private javax.swing.JLabel result;
    private javax.swing.JRadioButton shortestPath;
    private javax.swing.JRadioButton square;
    private javax.swing.JRadioButton triangle;
    private javax.swing.JTextField vertexName;
    private javax.swing.JPanel workSpace;
    private javax.swing.JLabel workspaceTitle;
    // End of variables declaration//GEN-END:variables
}
